DROP TABLE CSE532.MERGED_ZIP@
DROP TABLE CSE532.ZIP_LESS_THAN_AVG@
CREATE TABLE CSE532.MERGED_ZIP (
    ZIPCODE VARCHAR(10),
    MERGED_ZIPCODES VARCHAR(1000),
    MERGED_POPULATION INT,
    MERGED_BOUNDARY DB2GSE.ST_MULTIPOLYGON
)@
CREATE TABLE CSE532.ZIP_LESS_THAN_AVG (
        ZIPCODE VARCHAR(10),
        POPULATION INT,
        BOUNDARY DB2GSE.ST_MULTIPOLYGON
)@
CREATE OR REPLACE PROCEDURE CSE532.Mergezip()
LANGUAGE SQL
BEGIN
    DECLARE AVGPOPULATION DOUBLE;
    DECLARE CENTER_ZIPCODE VARCHAR(10);
    DECLARE NEW_POPULATION INT;
    DECLARE NEW_MERGED_ZIPCODES VARCHAR(1000);
    DECLARE DELETE_ZIPCODES_MERGED VARCHAR(1000);
    DECLARE CONTINUE BOOLEAN DEFAULT TRUE;

    -- Compute avg population -- 
    SELECT AVG(POPULATION) INTO AVGPOPULATION FROM CSE532.ZIPCENSUS;
    
    -- Insert zipcodes with less pop avg to temp tables--
    INSERT INTO CSE532.MERGED_ZIP (ZIPCODE, MERGED_ZIPCODES, MERGED_POPULATION, MERGED_BOUNDARY)
    SELECT ZIP AS ZIPCODE, ZIP AS MERGED_ZIPCODES, POPULATION, USZIP.SHAPE AS MERGED_BOUNDARY
    FROM CSE532.ZIPCENSUS, CSE532.USZIP AS USZIP
    WHERE POPULATION < AVGPOPULATION AND CSE532.ZIPCENSUS.ZIP = SUBSTRING(USZIP.ZCTA5CE10, 1, 5)
    ORDER BY POPULATION DESC;

    INSERT INTO CSE532.ZIP_LESS_THAN_AVG (ZIPCODE, POPULATION, BOUNDARY)
    SELECT ZIP AS ZIPCODE, POPULATION, USZIP.SHAPE AS BOUNDARY
    FROM CSE532.ZIPCENSUS, CSE532.USZIP AS USZIP
    WHERE POPULATION < AVGPOPULATION AND CSE532.ZIPCENSUS.ZIP = SUBSTRING(USZIP.ZCTA5CE10, 1, 5);

    -- Iterate through temp table 1 --
    FOR C1 AS (SELECT ZIPCODE, MERGED_ZIPCODES, MERGED_POPULATION FROM CSE532.MERGED_ZIP) DO
        SET CENTER_ZIPCODE = C1.ZIPCODE;
        SET NEW_POPULATION = C1.MERGED_POPULATION;
        SET NEW_MERGED_ZIPCODES = C1.MERGED_ZIPCODES;
        SET DELETE_ZIPCODES_MERGED = '';
        SET CONTINUE = TRUE;
            -- iterate through temp table 2 --
            FOR C2 AS (SELECT ZLTA.ZIPCODE, POPULATION FROM CSE532.ZIP_LESS_THAN_AVG AS ZLTA, CSE532.MERGED_ZIP WHERE CENTER_ZIPCODE = CSE532.MERGED_ZIP.ZIPCODE AND CSE532.MERGED_ZIP.ZIPCODE != ZLTA.ZIPCODE AND DB2GSE.ST_INTERSECTS(ZLTA.BOUNDARY, CSE532.MERGED_ZIP.MERGED_BOUNDARY) = 1 ORDER BY POPULATION ASC) DO
                IF CONTINUE THEN
                    -- track new population and zipcodes being merged --
                    SET NEW_POPULATION = NEW_POPULATION + C2.POPULATION;
                    SET NEW_MERGED_ZIPCODES = NEW_MERGED_ZIPCODES || ',' || C2.ZIPCODE;
                    SET DELETE_ZIPCODES_MERGED = DELETE_ZIPCODES_MERGED || ',' || C2.ZIPCODE;
                    IF NEW_POPULATION >= AVGPOPULATION THEN
                        -- if new pop > avg pop, then update pop info in temp table1, and delete merged zipcodes from temp tables --
                        SET CONTINUE = FALSE;
                        EXECUTE IMMEDIATE 'DELETE FROM CSE532.ZIP_LESS_THAN_AVG WHERE ZIPCODE IN (' || TRIM(BOTH ',' FROM NEW_MERGED_ZIPCODES) || ')';
                        EXECUTE IMMEDIATE 'DELETE FROM CSE532.MERGED_ZIP WHERE ZIPCODE IN (' || TRIM(BOTH ',' FROM DELETE_ZIPCODES_MERGED) || ')';
                        UPDATE CSE532.MERGED_ZIP
                        SET MERGED_ZIPCODES = NEW_MERGED_ZIPCODES,
                            MERGED_POPULATION = NEW_POPULATION
                        WHERE ZIPCODE = CENTER_ZIPCODE;
                    END IF;
                END IF;
            END FOR;
        
        -- Update MERGED_ZIP 
    END FOR;
    DELETE FROM CSE532.MERGED_ZIP
    WHERE MERGED_POPULATION < AVGPOPULATION;

    INSERT INTO CSE532.MERGED_ZIP (ZIPCODE, MERGED_ZIPCODES, MERGED_POPULATION, MERGED_BOUNDARY)
    SELECT ZIP AS ZIPCODE, ZIP AS MERGED_ZIPCODES, POPULATION, USZIP.SHAPE AS MERGED_BOUNDARY
    FROM CSE532.ZIPCENSUS, CSE532.USZIP AS USZIP
    WHERE POPULATION > AVGPOPULATION AND CSE532.ZIPCENSUS.ZIP = SUBSTRING(USZIP.ZCTA5CE10, 1, 5);
END;
@

CALL CSE532.MERGEZIP()@
SELECT ZIPCODE, MERGED_ZIPCODES, MERGED_POPULATION FROM CSE532.MERGED_ZIP@

-- DROP TABLE CSE532.MERGED_ZIP@
-- DROP TABLE CSE532.ZIP_LESS_THAN_AVG@